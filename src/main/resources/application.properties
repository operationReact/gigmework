# -----------------------------------------------------------------------------
# Database configuration
#
# The application ships with sensible defaults using an in‑memory H2 database so
# it can start up without any external dependencies.  These settings are
# suitable for development and testing.  For production use you should switch
# to a proper relational database (e.g. PostgreSQL or MySQL) and override
# the datasource properties below via environment variables or a separate
# configuration file.

# Use H2 in‑memory database by default.  When overriding the URL to point to
# another database, also provide driver class, username and password.
spring.datasource.url=jdbc:h2:mem:gigmework;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# Enable the H2 web console for interactive inspection (http://localhost:8080/h2-console)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true

# Hibernate settings
# Create and update the schema automatically on startup.  Use `validate` or
# `none` in production and rely on Flyway or Liquibase for migrations.
spring.jpa.hibernate.ddl-auto=update

# Show SQL statements in the console (useful during development).
spring.jpa.show-sql=true

# Specify the dialect explicitly to avoid warnings.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.profiles.active=dev
# -----------------------------------------------------------------------------
# Example configuration for PostgreSQL
#
# To run against a PostgreSQL instance instead of the embedded H2 database,
# uncomment the following lines and provide your own credentials.  You will
# also need to add the PostgreSQL driver dependency in build.gradle (already
# present as a runtimeOnly dependency).  Remove or comment out the H2
# properties above when using PostgreSQL.
#
# spring.datasource.url=jdbc:postgresql://localhost:5432/gigmework
# spring.datasource.username=postgres
# spring.datasource.password=your_password
# spring.datasource.driver-class-name=org.postgresql.Driver
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.hibernate.ddl-auto=update